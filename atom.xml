<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WX&#39;sMajula</title>
  
  
  <link href="https://0922wx.github.io/atom.xml" rel="self"/>
  
  <link href="https://0922wx.github.io/"/>
  <updated>2024-10-31T11:26:05.646Z</updated>
  <id>https://0922wx.github.io/</id>
  
  <author>
    <name>王潇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TS工具类型</title>
    <link href="https://0922wx.github.io/2024/10/31/TS%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B/"/>
    <id>https://0922wx.github.io/2024/10/31/TS%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-10-31T11:10:32.000Z</published>
    <updated>2024-10-31T11:26:05.646Z</updated>
    
    <content type="html"><![CDATA[<p>也是被问了两次了</p><p><code>Awaited&lt;Type&gt;</code>:用来取出 Promise 的返回值类型，适合用在描述<code>then()</code>方法和 await 命令的参数类型。</p><p><code>Partial</code>：将所有类型设置为可选<code>Partial&lt;A&gt;</code></p><p><code>Required</code>:所有属性必选</p><p><code>readonly</code>：将属性标记为只读</p><p><code>Record</code>:声明属性名还未确定的接口类型</p><h4 id="Awaited">Awaited</h4><blockquote><p><code>Awaited&lt;Type&gt;</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;; <span class="comment">//Awaited&lt;Type&gt;会返回 Promise 的返回值类型（string）</span></span><br></pre></td></tr></table></figure><p>还能返回多重promise的返回值类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;&gt;;</span><br></pre></td></tr></table></figure><p>如果它的类型参数不是 Promise 类型，那么就会原样返回</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number | boolean</span></span><br><span class="line"><span class="keyword">type</span> C = <span class="title class_">Awaited</span>&lt;<span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><h2 id="ConstructorParameters">ConstructorParameters</h2><p><code>ConstructorParameters&lt;Type&gt;</code>提取构造方法<code>Type</code>的参数类型，组成一个元组类型返回。也就是用来获取构造函数的构造参数</p><p>最看不懂的一集</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title function_">new</span> (<span class="attr">x</span>: <span class="built_in">string</span>, <span class="attr">y</span>: <span class="built_in">number</span>) =&gt; <span class="built_in">object</span>&gt;; <span class="comment">// [x: string, y: number]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title function_">new</span> (x?: <span class="built_in">string</span>) =&gt; <span class="built_in">object</span>&gt;; <span class="comment">// [x?: string | undefined]</span></span><br></pre></td></tr></table></figure><p>可以返回一些内置构造方法的参数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">ErrorConstructor</span>&gt;; <span class="comment">// [message?: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">FunctionConstructor</span>&gt;; <span class="comment">// string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">RegExpConstructor</span>&gt;; <span class="comment">// [pattern:string|RegExp, flags?:string]</span></span><br></pre></td></tr></table></figure><p>参数类型不是构造方法，就会报错</p><h4 id="Record">Record</h4><blockquote><p><code>Record&lt;K,T&gt;</code>构造具有给定类型<code>T</code>的一组属性<code>K</code>的类型。在将一个类型的属性映射到另一个类型的属性时，<code>Record</code>非常方便。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;job&#x27;</span> | <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">// 等价于你一个个实现这些属性了</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Record</span>&lt;<span class="title class_">UserProps</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;fe-developer&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;john.doe@example.com&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Pick">Pick</h5><blockquote><p><code>Pick</code>:接收一个对象类型，以及一个字面量类型组成的联合类型，这个联合类型只能是由对象类型的属性名组成的。它会对这个对象类型进行裁剪，只保留你传入的属性名组成的部分</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">phone</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 只提取其中的 name 与 age 信息</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserBasicInfo</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><h4 id="Omit">Omit</h4><blockquote><p><code>Omit</code>:就是 Pick 类型的另一面，它的入参和 Pick 类型一致，但效果却是相反的——它会移除传入的属性名的部分，只保留剩下的部分作为新的对象类型</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type User = &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">  email: string;</span><br><span class="line">  phone: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只移除 phone 属性</span><br><span class="line">type UserWithoutPhone = Omit&lt;User, &#x27;phone&#x27;&gt;;</span><br></pre></td></tr></table></figure><h4 id="Exclude和Extract">Exclude和Extract</h4><blockquote><p><code>Exclude</code> 和<code>Extract</code>:差集和交集</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;email&#x27;</span> | <span class="string">&#x27;phone&#x27;</span> | <span class="string">&#x27;address&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">// OptionalUserProps = UserProps - RequiredUserProps</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalUserProps</span> = <span class="title class_">Exclude</span>&lt;<span class="title class_">UserProps</span>, <span class="title class_">RequiredUserProps</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">optionalUserProps</span>: <span class="title class_">OptionalUserProps</span> = <span class="string">&#x27;age&#x27;</span>; <span class="comment">// &#x27;age&#x27; | &#x27;phone&#x27; | &#x27;address&#x27;;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;email&#x27;</span> | <span class="string">&#x27;phone&#x27;</span> | <span class="string">&#x27;address&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUserPropsOnly</span> = <span class="title class_">Extract</span>&lt;<span class="title class_">UserProps</span>, <span class="title class_">RequiredUserProps</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">requiredUserPropsOnly</span>: <span class="title class_">RequiredUserPropsOnly</span> = <span class="string">&#x27;name&#x27;</span>; <span class="comment">// &#x27;name&#x27; | &#x27;email&#x27;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;也是被问了两次了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Awaited&amp;lt;Type&amp;gt;&lt;/code&gt;:用来取出 Promise 的返回值类型，适合用在描述&lt;code&gt;then()&lt;/code&gt;方法和 await 命令的参数类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Partial&lt;/co</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Typescript" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/Typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>10-25两种状态</title>
    <link href="https://0922wx.github.io/2024/10/25/10-25/"/>
    <id>https://0922wx.github.io/2024/10/25/10-25/</id>
    <published>2024-10-25T15:18:31.000Z</published>
    <updated>2024-10-25T15:23:31.321Z</updated>
    
    <content type="html"><![CDATA[<p>嫌弃面试问题问得太怪的，不招人纯为了kpi问点怪题罢了。</p><p>嫌弃面试问题问得简单的，不招人纯为了kpi唠点家常罢了。</p><p>一想到面半天薪资3k就气笑了。</p><p>啊，让人无语的世界。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;嫌弃面试问题问得太怪的，不招人纯为了kpi问点怪题罢了。&lt;/p&gt;
&lt;p&gt;嫌弃面试问题问得简单的，不招人纯为了kpi唠点家常罢了。&lt;/p&gt;
&lt;p&gt;一想到面半天薪资3k就气笑了。&lt;/p&gt;
&lt;p&gt;啊，让人无语的世界。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日常" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="流水账" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="2024年" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/%E6%B5%81%E6%B0%B4%E8%B4%A6/2024%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>奇点云</title>
    <link href="https://0922wx.github.io/2024/10/25/%E5%A5%87%E7%82%B9%E4%BA%91/"/>
    <id>https://0922wx.github.io/2024/10/25/%E5%A5%87%E7%82%B9%E4%BA%91/</id>
    <published>2024-10-25T07:45:17.000Z</published>
    <updated>2024-10-29T07:52:23.330Z</updated>
    
    <content type="html"><![CDATA[<p>汗流浃背(褒义)</p><ol><li>之前实习过吗(没有,感觉已经寄80%了)</li><li>介绍一下常用布局</li><li>选择器优先级</li><li>介绍一下定位</li><li>absolute 设置top:10px会发生什么</li><li>JS的异步方法</li><li>await后面都能跟些什么</li><li>TS的特点</li><li>TS的数据类型</li><li>TS怎么类型声明</li><li>TS的interface和type的区别</li><li>TS的工具类</li><li>div包裹div，外层div的内联样式会影响到内部吗</li><li>写过自定义Hook吗</li><li>less和sass的优点</li><li>==和===的区别</li><li>[]==[]会发生什么(false)</li><li>react常用的HOOKS</li><li>Hooks的执行顺序 (完全不知道捏)</li><li>第一个useeffect的依赖项[a],第二个useeffect依赖项[a,b]，a变化时会一起触发渲染吗</li><li>sql语句(不会)</li><li>linux常用命令</li></ol><h4 id="213">213</h4><ol><li><ul><li>首先，React 会执行组件的函数体，开始渲染过程。在这个阶段，使用 <code>useMemo</code> 和 <code>useCallback</code> 的代码会被执行。</li><li><strong><code>useMemo</code></strong> 会根据依赖项的变化来计算并返回缓存的值。如果依赖项没有变化，则返回之前缓存的值。</li><li><strong><code>useCallback</code></strong> 会根据依赖项的变化返回一个缓存的函数引用。如果依赖项没有变化，则返回之前的函数引用。</li></ul></li><li><strong>DOM 更新</strong>：<ul><li>在渲染过程结束后，React 会进行 DOM 更新，将计算得到的值和组件的渲染结果应用到 DOM 中。</li></ul></li><li><strong>副作用处理</strong>：<ul><li>在所有的渲染和 DOM 更新完成后，React 才会执行 <code>useEffect</code> 中定义的副作用函数。如果组件在这一过程中被卸载，相关的清理函数（如果定义了）也会被调用。</li></ul></li></ol><h3 id="执行顺序总结">执行顺序总结</h3><ol><li><strong>首先执行 <code>useMemo</code></strong> 和 <code>useCallback</code>：在组件渲染函数中计算值和函数引用。</li><li><strong>随后进行 DOM 更新</strong>：将渲染结果应用到 DOM。</li><li><strong>最后执行 <code>useEffect</code> 中的副作用函数</strong>：处理副作用，与数据获取、订阅等相关。</li></ol><p>这种执行顺序确保了在调用 effect 时，组件已经完成了渲染，并且可以安全地使用渲染过程中创建的值和函数引用。希望这能帮助你理解这三个钩子的执行顺序！<code>useEffect</code> 在 React 的执行顺序中被设计为在组件渲染后执行，这样的设计有几个重要原因：</p><h3 id="1-渲染结果的可用性">1. <strong>渲染结果的可用性</strong></h3><p><code>useEffect</code> 依赖于组件渲染后的状态和 DOM 节点。如果在渲染过程之前执行 <code>useEffect</code>，那么它可能会尝试访问未更新的状态或未渲染的 DOM 结构，这会导致不可预测的行为和错误。因此，React 选择在渲染完成后再执行 <code>useEffect</code>，以确保所有的渲染结果和状态都是最新的。</p><h3 id="2-性能优化">2. <strong>性能优化</strong></h3><p>在组件渲染期间，React 会进行虚拟 DOM 的计算和对比，以决定如何高效地更新实际 DOM。如果将副作用放在渲染过程中，可能会导致不必要的渲染延迟和性能损失。通过将副作用放在渲染的下一步，React 可以优化这些操作，从而提升性能。</p><h3 id="3-避免副作用影响渲染">3. <strong>避免副作用影响渲染</strong></h3><p>副作用通常涉及异步操作（如数据获取、订阅等），这些操作可能需要时间才能完成。如果在渲染期间执行这些操作，会导致组件的显示延迟或不一致。将副作用放在渲染后，可以确保用户看到的是稳定的 UI，而不会因为运行副作用而造成闪烁或不一致的体验。</p><h3 id="总结">总结</h3><p>通过在渲染完成后才执行 <code>useEffect</code>，React 能够确保：</p><ul><li>访问的是最新的状态和 DOM；</li><li>不影响渲染性能和用户体验；</li><li>副作用可以安全地处理和清理。</li></ul><p>这种设计使得 React 的组件能够更加高效和稳定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;汗流浃背(褒义)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;之前实习过吗(没有,感觉已经寄80%了)&lt;/li&gt;
&lt;li&gt;介绍一下常用布局&lt;/li&gt;
&lt;li&gt;选择器优先级&lt;/li&gt;
&lt;li&gt;介绍一下定位&lt;/li&gt;
&lt;li&gt;absolute 设置top:10px会发生什么&lt;/li&gt;
&lt;li&gt;J</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>谐云科技</title>
    <link href="https://0922wx.github.io/2024/10/25/%E8%B0%90%E4%BA%91%E7%A7%91%E6%8A%80/"/>
    <id>https://0922wx.github.io/2024/10/25/%E8%B0%90%E4%BA%91%E7%A7%91%E6%8A%80/</id>
    <published>2024-10-25T01:56:27.000Z</published>
    <updated>2024-10-25T02:02:48.088Z</updated>
    
    <content type="html"><![CDATA[<p>不像是要招人的样子捏</p><ol><li>HTTP1.0和2.0</li><li>项目是练手的还是投入使用了</li><li>react双向绑定</li><li>react数据缓存？（不知道什么东西）</li><li>JS和TS有什么区别</li><li>讲一下事件循环</li><li>怎么看待互联网行业</li><li>怎么看加班</li></ol><p>反问：</p><ol><li>实习生会先培训再投入研发</li><li>主要是react</li></ol><p><code>昨夜想了很久，哪个路口哪有~</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不像是要招人的样子捏&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP1.0和2.0&lt;/li&gt;
&lt;li&gt;项目是练手的还是投入使用了&lt;/li&gt;
&lt;li&gt;react双向绑定&lt;/li&gt;
&lt;li&gt;react数据缓存？（不知道什么东西）&lt;/li&gt;
&lt;li&gt;JS和TS有什么区别&lt;/li&gt;
&lt;li&gt;讲</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>脑虎科技之马踏棋盘</title>
    <link href="https://0922wx.github.io/2024/10/23/%E8%84%91%E8%99%8E%E7%A7%91%E6%8A%80%E4%B9%8B%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98/"/>
    <id>https://0922wx.github.io/2024/10/23/%E8%84%91%E8%99%8E%E7%A7%91%E6%8A%80%E4%B9%8B%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98/</id>
    <published>2024-10-23T09:52:10.000Z</published>
    <updated>2024-10-23T11:54:49.538Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个著名的问题。在 8×8 的国际象棋棋盘上用一个马按照马步跳遍整个棋盘，要求每个格子都只跳到一次，最后回到出发点。</p><h5 id="第一问">第一问</h5><p>你的任务是实现一个网页来展示马踏棋盘的整个交互过程。需求描述如 下：</p><p><strong>需求a</strong>.页面上有一个输入框 “start point”，用户可以输入马的起始位置。起始位置是用逗号隔开的 2 个整数。例如用户输入 4,4，下面右图的起始位置 1 就 是坐标(4,4)</p><p><strong>需求b.</strong> 实现一个拖动条，用户拖动这个拖动条，可以看到马当前移动的路径。 例如用户拖动到 40，那么下面的图就要展示出从第 1 到第 40 步移动的路径。</p><p><strong>需求c.</strong> 实现两个个按钮，“line”用于显示马移动的路径，“numbers”用于 显示移动的步数。我这里图片显示是 2 个棋盘，你实际实现的时候，用户只应该 看到一个棋盘，用户点击 line 和 numbers 按钮的时候，棋盘显示效果会发生切换。</p><h5 id="第二问">第二问</h5><p>马踏棋盘并不是只是在国际象棋棋盘上才成立，其他尺寸的棋盘也一样 具有这样的结论。传统的马踏棋盘需要马最终回到起点，第二和第三问这里可以 稍微弱化我们的要求，只要求走完整个棋盘的格子，不要求回到起点。 需求 d：在保留前面功能的前提下，增加一个输入框，名称叫“board size”， 用于输入棋盘的大小。起始位置是用逗号隔开的 2 个整数。例如输入 (3,10)，得 到的结果是这样的</p><p>例如输入 (25,25)，得到的结果是这样的</p><h5 id="第三问">第三问</h5><p>马踏棋盘并不是只是在矩形的棋盘上才成立，其他不规则图形也有可能 具有这样的结论。 需求 e：在保留需求 a，b，c 的前提下，增加一个用户自定义棋盘按钮“user defined board”，用户点击此按钮之后可以从自己的电脑上传一个自己定义的 棋盘文件，这个文件是用 json 或者 yaml 描述的。然后得到不规则图形的马踏 棋盘交互效果，如下图所示。你的代码注释里要讲清楚如何描述不规则棋盘</p><p>okok,一个个来</p><h5 id="第一问-v2">第一问</h5><p>先实现一下8x8的棋盘再说</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSquare</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> squares = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> squareClass = (i + j) % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">&quot;square&quot;</span> : <span class="string">&quot;square-black&quot;</span>;</span><br><span class="line">      squares.<span class="title function_">push</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">i</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">j</span>&#125;`&#125; <span class="attr">className</span>=<span class="string">&#123;squareClass&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> squares;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span>&#123;renderSquare()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">8</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">8</span>, <span class="number">1</span>fr);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.square</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#b8b4b4</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;-black &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line"></span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后加上文本框和马</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;./assets/horse.svg&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSquare</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> squares = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> squareClass = (i + j) % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">&quot;square&quot;</span> : <span class="string">&quot;square-black&quot;</span>;</span><br><span class="line">      squares.<span class="title function_">push</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">i</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">j</span>&#125;`&#125; <span class="attr">className</span>=<span class="string">&#123;squareClass&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> squares;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span>&#123;renderSquare()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;Icon&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;horse&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;searchbox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">8</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">8</span>, <span class="number">1</span>fr);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.square</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#b8b4b4</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-black &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.searchbox</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">28%</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">26px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么下一个问题:获取文本框的输入并区分逗号?</p><p><code>const values = inputValue.split(&quot;,&quot;).map(Number);</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;./assets/horse.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChangeEvent</span>, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染8x8的棋盘</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSquare</span>(<span class="params"><span class="attr">startPosition</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> squares = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> squareClass = (i + j) % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">&quot;square&quot;</span> : <span class="string">&quot;square-black&quot;</span>;</span><br><span class="line">      squares.<span class="title function_">push</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">i</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">j</span>&#125;`&#125; <span class="attr">className</span>=<span class="string">&#123;squareClass&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;startPosition &amp;&amp; startPosition[0] === i &amp;&amp; startPosition[1] === j &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;Icon&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;horse&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;position:</span>&quot;<span class="attr">absolute</span>&quot;&#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">          )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> squares;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [startPosition, setStartPosition] = useState&lt;[<span class="built_in">number</span>, <span class="built_in">number</span>] | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> values = inputValue.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (values.<span class="property">length</span> === <span class="number">2</span> &amp;&amp; values.<span class="title function_">every</span>(<span class="function"><span class="params">n</span> =&gt;</span> !<span class="built_in">isNaN</span>(n) &amp;&amp; n &gt;= <span class="number">0</span> &amp;&amp; n &lt; <span class="number">8</span>)) &#123;</span><br><span class="line">      <span class="title function_">setStartPosition</span>([values[<span class="number">0</span>], values[<span class="number">1</span>]]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;请输入有效的起始位置,格式为:x,y,且 x 和 y 在 0 到 7 之间.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params"><span class="attr">event</span>: <span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setInputValue</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span>&#123;renderSquare(startPosition)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;searchbox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          确定</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个著名的问题。在 8×8 的国际象棋棋盘上用一个马按照马步跳遍整个棋盘，要求每个格子都只跳到一次，最后回到出发点。&lt;/p&gt;
&lt;h5 id=&quot;第一问&quot;&gt;第一问&lt;/h5&gt;
&lt;p&gt;你的任务是实现一个网页来展示马踏棋盘的整个交互过程。需求描述如 下：&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>全字母短句</title>
    <link href="https://0922wx.github.io/2024/10/21/%E5%85%A8%E5%AD%97%E6%AF%8D%E7%9F%AD%E5%8F%A5/"/>
    <id>https://0922wx.github.io/2024/10/21/%E5%85%A8%E5%AD%97%E6%AF%8D%E7%9F%AD%E5%8F%A5/</id>
    <published>2024-10-21T12:39:22.000Z</published>
    <updated>2024-10-21T12:47:06.528Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/three-month-preparation-kit-pangrams/problem?h_l=interview&amp;isFullScreen=true&amp;playlist_slugs%5B%5D%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D%5B%5D=three-month-preparation-kit&amp;playlist_slugs%5B%5D%5B%5D=three-month-week-two">Pangrams | HackerRank</a></p><p>全字母短句中每个字母都出现至少一次</p><p>给定一个句子s , 告诉 Roy 这个句子是不是一个全字母短句。</p><p>最开始想遍历然后用正则求，后来发现是整个句子的字母不重复</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pangrams</span>(<span class="params"><span class="attr">s</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// Write your code here</span></span><br><span class="line">    <span class="keyword">const</span> newStr = s.<span class="title function_">toLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> uniqueLetters = <span class="keyword">new</span> <span class="title class_">Set</span>(newStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uniqueLetters.<span class="property">size</span> &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;pangram&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;not pangram&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用set做</p><p>将输入字符串转换为小写，并移除所有空格</p><p>检查去重后字母的数量是否至少为 26</p><p><code>replace(/\s+/g, '')</code>正则，<code>\s</code>表示空白字符，<code>+</code>是前面的元素，合起来就是将匹配一个或多个连续的空白字符，将匹配到的空白换成空字符</p><p><code>uniqueLetters.size &gt;= 26</code>是何意啊</p><p><code>set.size</code>返回元素数量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/three-month-preparation-kit-pangrams/problem?h_l=interview&amp;amp;isFullScreen=true&amp;amp;playl</summary>
      
    
    
    
    <category term="HackerRank三个月挑战" scheme="https://0922wx.github.io/categories/HackerRank%E4%B8%89%E4%B8%AA%E6%9C%88%E6%8C%91%E6%88%98/"/>
    
    <category term="第二周" scheme="https://0922wx.github.io/categories/HackerRank%E4%B8%89%E4%B8%AA%E6%9C%88%E6%8C%91%E6%88%98/%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>理解依赖注入</title>
    <link href="https://0922wx.github.io/2024/10/20/%E7%90%86%E8%A7%A3%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://0922wx.github.io/2024/10/20/%E7%90%86%E8%A7%A3%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2024-10-20T06:11:26.000Z</published>
    <updated>2024-10-20T07:14:20.284Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是依赖关系">什么是依赖关系</h5><p>你有一个用户类，一个帖子类，一个页面类</p><p>每当创建帖子或者页面时，都需要用户类（因为要检查创建页面或者帖子的用户是否在数据库中，并关联二者）</p><p>那么在创建帖子或者页面时，你就需要用户类这个<strong>依赖项</strong></p><p>哦豁，那理论上每次创建帖子或者页面的时候都要随时新建一个用户类了</p><p>听上去一下子就变得恶心起来了，因为都让你耦合完了，性能什么的也不用考虑，因为卡爆了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User was instantiated&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> name = <span class="string">&#x27;wx&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> user = <span class="keyword">new</span> <span class="title class_">User</span>()</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Post was instantiated&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> user = <span class="keyword">new</span> <span class="title class_">User</span>()</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Page was instantiated&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client code</span></span><br><span class="line"><span class="keyword">const</span> post = <span class="keyword">new</span> <span class="title class_">Post</span>()</span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">new</span> <span class="title class_">Page</span>()</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[LOG]</span>: &quot;User was instantiated&quot; </span><br><span class="line"><span class="section">[LOG]</span>: &quot;Post was instantiated&quot; </span><br><span class="line"><span class="section">[LOG]</span>: &quot;User was instantiated&quot; </span><br><span class="line"><span class="section">[LOG]</span>: &quot;Page was instantiated&quot; </span><br></pre></td></tr></table></figure><p>不过我们有无需注入的依赖关系方法，也就是<strong>依赖注入</strong></p><h5 id="依赖注入">依赖注入</h5><p>对的，我生来就是干这个的</p><p>不用new创建实例，一手反转控制，只要创建一个实例就可以掌控所有东西，ts可以这么干</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User was instantiated&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> name = <span class="string">&#x27;wx&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> user :<span class="title class_">User</span> </span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Post was instantiated&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">user</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> user :<span class="title class_">User</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Page was instantiated&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//nestjs</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//client code</span></span><br><span class="line"><span class="keyword">const</span> post = <span class="keyword">new</span> <span class="title class_">Post</span>(user)</span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">new</span> <span class="title class_">Page</span>(user)</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[LOG]</span>: &quot;User was instantiated&quot; </span><br><span class="line"><span class="section">[LOG]</span>: &quot;Post was instantiated&quot; </span><br><span class="line"><span class="section">[LOG]</span>: User: &#123;</span><br><span class="line">  &quot;name&quot;: &quot;wx&quot;</span><br><span class="line">&#125; </span><br><span class="line"><span class="section">[LOG]</span>: &quot;Page was instantiated&quot; </span><br></pre></td></tr></table></figure><p>这下只实例一次了</p><h5 id="nest里的依赖注入">nest里的依赖注入</h5><p>好就好在解耦又方便测试，还有可重用性</p><p>那么模块是如何封装这些不同的类，注入依赖呢？</p><p>首先理解一件事在nest中，<strong>Module是最高指挥官</strong>，他将所有提供的程序封装其中（service controller customer class）</p><p>这意味着Module是<strong>决定</strong>某项特定服务是否导出或者被别人使用。因此，在一个特定模块内写入的所有内容都将保留在一个模块内，由你决定是否共享。比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">   User Module &lt;|-- 决定</span><br><span class="line">    Post Module &lt;|-- 决定</span><br><span class="line">    class User Module&#123;</span><br><span class="line">        User Controller</span><br><span class="line">        User Service</span><br><span class="line">        Custom Class</span><br><span class="line">    &#125;</span><br><span class="line">    class Post Module&#123;</span><br><span class="line">        Post Controller</span><br><span class="line">        Post Service</span><br><span class="line">        Custom Class</span><br><span class="line">    &#125;</span><br><span class="line">    class 决定&#123;</span><br><span class="line">        导出?</span><br><span class="line">        提供?</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>你希望<code>User Controller</code>使用<code>User Service</code>你必须让<code>UserModule</code>允许</p><p>在其组件内共享服务或任何其他自定义类被称为 <strong>提供</strong>（provider）</p><p>其实也就是<code>module</code>里的<code>exports</code>和 <code>providers</code>罢了</p><p>那么<strong>模块内</strong>依赖注入分为以下三步</p><p>1.声明一个可注入的类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppService</span>&#123;</span><br><span class="line"><span class="title function_">getHello</span>():<span class="built_in">string</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就包含可注入装饰器的类就是提供者了</p><p>2.然后你得让module知道有这么个东西</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.module.ts</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">UserModuler</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>], <span class="comment">//这一行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>3.再别的地方用，两种方法，一种是构造方法,一种是属性依赖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">appService</span>: <span class="title class_">AppService</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span>(<span class="title class_">BService</span>)</span><br><span class="line"><span class="keyword">private</span>  <span class="attr">appService</span>:<span class="title class_">AppService</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;什么是依赖关系&quot;&gt;什么是依赖关系&lt;/h5&gt;
&lt;p&gt;你有一个用户类，一个帖子类，一个页面类&lt;/p&gt;
&lt;p&gt;每当创建帖子或者页面时，都需要用户类（因为要检查创建页面或者帖子的用户是否在数据库中，并关联二者）&lt;/p&gt;
&lt;p&gt;那么在创建帖子或者页面时，你就需要用户类这个&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="nest" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/nest/"/>
    
    
  </entry>
  
  <entry>
    <title>一些用得到的nest插件</title>
    <link href="https://0922wx.github.io/2024/10/20/%E4%B8%80%E4%BA%9B%E7%94%A8%E5%BE%97%E5%88%B0%E7%9A%84nest%E6%8F%92%E4%BB%B6/"/>
    <id>https://0922wx.github.io/2024/10/20/%E4%B8%80%E4%BA%9B%E7%94%A8%E5%BE%97%E5%88%B0%E7%9A%84nest%E6%8F%92%E4%BB%B6/</id>
    <published>2024-10-20T05:58:00.000Z</published>
    <updated>2024-10-20T07:47:17.438Z</updated>
    
    <content type="html"><![CDATA[<p><code>class-transformer </code></p><p>在DTO中转化类型，毕竟url里的都是字符串，总得改一下类型，不然报错</p><p><code>class-validator</code></p><p>一些判断条件,IsInt()什么的</p><p><code>@nestjs/mapped-types</code></p><p>ts工具类的效果</p><p>比如</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">PartialType</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mapped-types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CreateUserDto</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./create-user.dto&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PatchUserDto</span> extend <span class="title class_">PartialType</span>(<span class="title class_">CreateUserDto</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>全部可选</p><p><code>@nestjs/swagger</code></p><p>集成swagger</p><blockquote><p>D:\BaiduNetdiskDownload\NestJS Masterclass - From Beginner To Advanced\5. Documenting Code \ 3. Enabling Swagger in NestJS</p></blockquote><p><code>nestjs/config</code></p><p>环境变量相关</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;class-transformer &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在DTO中转化类型，毕竟url里的都是字符串，总得改一下类型，不然报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class-validator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一些判断条件,IsInt()什么的&lt;/</summary>
      
    
    
    
    <category term="后端" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="nest" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/nest/"/>
    
    
  </entry>
  
  <entry>
    <title>花式数据请求</title>
    <link href="https://0922wx.github.io/2024/10/20/%E8%8A%B1%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
    <id>https://0922wx.github.io/2024/10/20/%E8%8A%B1%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</id>
    <published>2024-10-20T04:15:11.000Z</published>
    <updated>2024-10-20T04:52:56.867Z</updated>
    
    <content type="html"><![CDATA[<h5 id="如何获取url中的参数呢">如何获取url中的参数呢</h5><p>比如get用户id</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">userService</span>: <span class="title class_">UserService</span></span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;/:id&#x27;</span>)</span><br><span class="line">  <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GetUsers&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在nest中，可以用param装饰器获取，这种参数总是以<strong>斜线加冒号</strong>的形式给出</p><p>这么用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>,<span class="title class_">Param</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">userService</span>: <span class="title class_">UserService</span></span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;/:id&#x27;</span>)</span><br><span class="line">  <span class="title function_">getUsers</span>(<span class="params"><span class="meta">@Param</span>() <span class="attr">params</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)<span class="comment">//获取参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GetUsers&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多写个参数会怎么样？不会怎么样，像写多少写多少</p><p>发送<code>/users/123456/optional</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;/:id:optional?&#x27;</span>)</span><br><span class="line"> <span class="title function_">getUsers</span>(<span class="params"><span class="meta">@Param</span>() <span class="attr">params</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(params) <span class="comment">//&#123;id:&#x27;123456&#x27;,optional:&#x27;optional&#x27;&#125;</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;GetUsers&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>发送<code>/users/123456</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;123456&#x27;</span>,<span class="attr">optional</span>:undfiend&#125;</span><br></pre></td></tr></table></figure><p>这就是如何获取参数。</p><p>除了获取，自然也能查询</p><h5 id="查询参数">查询参数</h5><p>使用<code>Query()</code></p><p>通过 url 中 ？后面的用 &amp; 分隔的字符串传递数据。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://wx.com/person?<span class="attr">name</span>=wx&amp;age=<span class="number">23</span></span><br></pre></td></tr></table></figure><p>name和age就是其传递的数据</p><p>发送<code>users/123456?limit=10&amp;offset=20</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">limit</span>:<span class="string">&#x27;10&#x27;</span>,<span class="attr">offset</span>:<span class="string">&#x27;20&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>最终提供的是js对象</p><p>那怎么发请求主体呢</p><h5 id="请求参数">请求参数</h5><p>先写个请求主体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &#x27;name&#x27;:&#x27;wx&#x27;,</span><br><span class="line"> &#x27;password&#x27;:&#x27;123456&#x27;,</span><br><span class="line"> &#x27;email&#x27;:&#x27;wx.com&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这种要怎么获取呢</p><p><code>Body()</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="title function_">createUsers</span>(<span class="params"><span class="meta">@Body</span>() <span class="attr">request</span>:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;you sen a post request&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;wx&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;wx.com&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nest底层使用了express，所以也可以这么玩</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Req</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Request</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="title function_">createUsers</span>(<span class="params"><span class="meta">@Req</span>() <span class="attr">request</span>:<span class="title class_">Request</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;you sen a post request&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下子会打印一个很长的的对象，整个请求对象</p><p>这样也只是能玩罢了，不建议用</p><h5 id="那么怎么缩小范围，获取特定的查询参数，参数或者特定键值对呢">那么怎么缩小范围，获取特定的查询参数，参数或者特定键值对呢</h5><p>比如</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;/:id:optional?&#x27;</span>)</span><br><span class="line"><span class="title function_">getUsers</span>(<span class="params"><span class="meta">@Param</span>() <span class="attr">params</span>: <span class="built_in">any</span>, <span class="meta">@Query</span>() <span class="attr">query</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(query);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;GetUsers&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我只想获取id，不想获取可选的东西呢</p><p>在括号里加点东西就行了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;/:id:optional?&#x27;</span>)</span><br><span class="line"><span class="title function_">getUsers</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">any</span>, <span class="meta">@Query</span>() <span class="attr">query</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(query);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;GetUsers&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想获取请求头，有<code>Headers()</code></p><p>还有<code>Ip()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;如何获取url中的参数呢&quot;&gt;如何获取url中的参数呢&lt;/h5&gt;
&lt;p&gt;比如get用户id&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="后端" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="nest" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/nest/"/>
    
    
  </entry>
  
  <entry>
    <title>Permuting Two Arrays某种排列</title>
    <link href="https://0922wx.github.io/2024/10/18/Permuting-Two-Arrays%E6%9F%90%E7%A7%8D%E6%8E%92%E5%88%97/"/>
    <id>https://0922wx.github.io/2024/10/18/Permuting-Two-Arrays%E6%9F%90%E7%A7%8D%E6%8E%92%E5%88%97/</id>
    <published>2024-10-18T13:09:10.000Z</published>
    <updated>2024-10-18T13:14:54.887Z</updated>
    
    <content type="html"><![CDATA[<p>123</p><p><a href="https://www.hackerrank.com/challenges/three-month-preparation-kit-two-arrays/problem?h_l=interview&amp;isFullScreen=true&amp;playlist_slugs%5B%5D%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D%5B%5D=three-month-preparation-kit&amp;playlist_slugs%5B%5D%5B%5D=three-month-week-three">Permuting Two Arrays | HackerRank</a></p><p>将有A,B和K组成的q查询。对于每个查询，如果存在满足关系的排列A,B，则返回YES,否则NO</p><p>比如：</p><blockquote><p>A = [0,1]</p><p>B = [0,2]</p><p>k = 1</p><p>1+0 &gt;= 1 0+2 &gt;= 1 RETURN YES</p></blockquote><p>一开始只想着一个一个对过去就好，没想到要排序</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoArrays</span>(<span class="params"><span class="attr">k</span>: <span class="built_in">number</span>, <span class="attr">A</span>: <span class="built_in">number</span>[], <span class="attr">B</span>: <span class="built_in">number</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] + B[i] &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Yes&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoArrays</span>(<span class="params"><span class="attr">k</span>: <span class="built_in">number</span>, <span class="attr">A</span>: <span class="built_in">number</span>[], <span class="attr">B</span>: <span class="built_in">number</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// Write your code here</span></span><br><span class="line">    A.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    B.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] + B[i] &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;NO&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;YES&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;123&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/three-month-preparation-kit-two-arrays/problem?h_l=interview&amp;amp;isFullScreen=t</summary>
      
    
    
    
    <category term="HackerRank三个月挑战" scheme="https://0922wx.github.io/categories/HackerRank%E4%B8%89%E4%B8%AA%E6%9C%88%E6%8C%91%E6%88%98/"/>
    
    <category term="第三周" scheme="https://0922wx.github.io/categories/HackerRank%E4%B8%89%E4%B8%AA%E6%9C%88%E6%8C%91%E6%88%98/%E7%AC%AC%E4%B8%89%E5%91%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>nest导入模块</title>
    <link href="https://0922wx.github.io/2024/10/18/nest%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/"/>
    <id>https://0922wx.github.io/2024/10/18/nest%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/</id>
    <published>2024-10-18T11:07:43.000Z</published>
    <updated>2024-10-20T07:16:24.396Z</updated>
    
    <content type="html"><![CDATA[<p>如果你想要在Amodule里使用Bmodule里的服务那么可以选择：</p><p>如果模块外导入你想要在Amodule里使用Bmodule里的服务那么可以选择：</p><ol><li>在Bmodule里写入<code>exports:[BService]</code></li><li>在Amodule里写入<code>import:[Bmodule]</code></li></ol><p><strong>没错，第二次是导入module，而不是service</strong></p><p>这是最容易看错的</p><p>导入之后，有两种方式注入依赖</p><p>1.属性注入依赖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="comment">//依赖注入之属性注入共享的服务</span></span><br><span class="line">   <span class="meta">@Inject</span>(<span class="title class_">BService</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">bService</span>:<span class="title class_">BService</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="title function_">getOrderDesc</span>():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">getUserName</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Order for <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.构造函数注入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">userService</span>:<span class="title class_">UserService</span></span>)&#123;&#125;</span><br><span class="line">    <span class="title function_">getOrderDesc</span>():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">getUserName</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Order for <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局模块">全局模块</h4><p>用<code>@Global</code>装饰器声明就完事了（在module声明）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Global</span>, <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Global</span>()</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果你想要在Amodule里使用Bmodule里的服务那么可以选择：&lt;/p&gt;
&lt;p&gt;如果模块外导入你想要在Amodule里使用Bmodule里的服务那么可以选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Bmodule里写入&lt;code&gt;exports:[BService]&lt;/code&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="nest" scheme="https://0922wx.github.io/categories/%E5%90%8E%E7%AB%AF/nest/"/>
    
    
  </entry>
  
  <entry>
    <title>记一下vs插件</title>
    <link href="https://0922wx.github.io/2024/10/17/%E8%AE%B0%E4%B8%80%E4%B8%8Bvs%E6%8F%92%E4%BB%B6/"/>
    <id>https://0922wx.github.io/2024/10/17/%E8%AE%B0%E4%B8%80%E4%B8%8Bvs%E6%8F%92%E4%BB%B6/</id>
    <published>2024-10-17T14:46:51.000Z</published>
    <updated>2024-10-17T14:55:50.119Z</updated>
    
    <content type="html"><![CDATA[<p>12</p><ul><li>别名路径跳转</li><li>any-rule</li><li>Bearded Theme</li><li>CSS Modules</li><li>Error Lens</li><li>es6-string-html</li><li>ES7+ React/Redux/React-Native snippets</li><li>ESLint</li><li>Fitten Code: Faster and Better AI Assistant</li><li>GitLens — Git supercharged</li><li>HTML CSS Support</li><li>JS JSX Snippets</li><li>json</li><li>Less IntelliSense</li><li>Live Preview</li><li>Live Server</li><li>Move TS and JS - Move TypeScript/JS files and update relative imports<code>v1.</code></li><li>Native Debug</li><li>open in browser</li><li>Path Autocomplete</li><li>Path Intellisense</li><li>Prettier - Code formatter</li><li>Prisma</li><li>px to rem &amp; rpx &amp; vw (cssrem)</li><li>React</li><li>React Redux Toolkit RTK Query Snippets</li><li>Tailwind CSS IntelliSense</li><li>Thunder Client</li><li>Time Master</li><li>TypeScript Importer</li><li>vscode-icons</li><li>Three.JS Snippets</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;12&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;别名路径跳转&lt;/li&gt;
&lt;li&gt;any-rule&lt;/li&gt;
&lt;li&gt;Bearded Theme&lt;/li&gt;
&lt;li&gt;CSS Modules&lt;/li&gt;
&lt;li&gt;Error Lens&lt;/li&gt;
&lt;li&gt;es6-string-html&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vscode" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/vscode/"/>
    
    
  </entry>
  
  <entry>
    <title>10-16折腾一下自动化部署</title>
    <link href="https://0922wx.github.io/2024/10/16/10-16%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://0922wx.github.io/2024/10/16/10-16%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</id>
    <published>2024-10-16T07:43:10.000Z</published>
    <updated>2024-10-16T08:08:32.686Z</updated>
    
    <content type="html"><![CDATA[<p>没错，目前每次发表都需要手动编译再推送，还有一个缺点是hexo源码本身没有云端备份（虽然不知道到底有什么后果）。</p><p>听说引入<code>Github Action</code>工作流后就可以交给Github自动完成了</p><p>点开仓库的settings -&gt; Pages,找到Build and deployment下Source，换成Github Actions。提示使用jekyll，点击jekyll的Configure，自动生成他的actions，然后点击右上角commit changes，直接点击提交，就创建完毕了。</p><p>弄完了，那到底有什么区别呢</p><p>我不知道</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没错，目前每次发表都需要手动编译再推送，还有一个缺点是hexo源码本身没有云端备份（虽然不知道到底有什么后果）。&lt;/p&gt;
&lt;p&gt;听说引入&lt;code&gt;Github Action&lt;/code&gt;工作流后就可以交给Github自动完成了&lt;/p&gt;
&lt;p&gt;点开仓库的settings -</summary>
      
    
    
    
    <category term="日常" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="流水账" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="2024年" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/%E6%B5%81%E6%B0%B4%E8%B4%A6/2024%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>理灵文化</title>
    <link href="https://0922wx.github.io/2024/10/14/%E7%90%86%E7%81%B5%E6%96%87%E5%8C%96/"/>
    <id>https://0922wx.github.io/2024/10/14/%E7%90%86%E7%81%B5%E6%96%87%E5%8C%96/</id>
    <published>2024-10-14T08:36:42.000Z</published>
    <updated>2024-10-16T07:34:08.318Z</updated>
    
    <content type="html"><![CDATA[<h4 id="汗流浃背">汗流浃背</h4><h5 id="汗流浃背-v2">汗流浃背</h5><p>甚至不小心鸽了一个多小时</p><p>1.介绍js数组方法，数组遍历方法的相关区别</p><p>2.react常用hook</p><p>3.css居中</p><p>4.ts工具类型</p><p>5.== 和 === 区别</p><p>6.filter 和 find 区别</p><p>7.语义化标签用处，怎么用</p><p>8.interface和type区别</p><p>9.学习路线，怎么学习的，看谁的博客</p><p>10.<code>display:none</code>和<code>opacity: 0</code>的区别</p><p>11.严格模式会渲染两次吗</p><p>项目相关 (失忆完了)</p><p>五天内</p><h5 id="TS工具类型">TS工具类型</h5><p>一种在类型别名的基础上，基于泛型去动态创建新类型</p><p><code>Partial</code>：将所有类型设置为可选<code>Partial&lt;A&gt;</code></p><p><code>Required</code>:所有属性必选</p><p><code>readonly</code>：将属性标记为只读</p><p><code>Record</code>:声明属性名还未确定的接口类型</p><blockquote><p><code>Record&lt;K,T&gt;</code>构造具有给定类型<code>T</code>的一组属性<code>K</code>的类型。在将一个类型的属性映射到另一个类型的属性时，<code>Record</code>非常方便。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;job&#x27;</span> | <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">// 等价于你一个个实现这些属性了</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Record</span>&lt;<span class="title class_">UserProps</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;fe-developer&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;john.doe@example.com&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Pick</code>:接收一个对象类型，以及一个字面量类型组成的联合类型，这个联合类型只能是由对象类型的属性名组成的。它会对这个对象类型进行裁剪，只保留你传入的属性名组成的部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">phone</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 只提取其中的 name 与 age 信息</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserBasicInfo</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p><code>Omit</code>:就是 Pick 类型的另一面，它的入参和 Pick 类型一致，但效果却是相反的——它会移除传入的属性名的部分，只保留剩下的部分作为新的对象类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">phone</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只移除 phone 属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserWithoutPhone</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;phone&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p><code>Exclude</code> 和<code>Extract</code>:差集和交集</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;email&#x27;</span> | <span class="string">&#x27;phone&#x27;</span> | <span class="string">&#x27;address&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">// OptionalUserProps = UserProps - RequiredUserProps</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalUserProps</span> = <span class="title class_">Exclude</span>&lt;<span class="title class_">UserProps</span>, <span class="title class_">RequiredUserProps</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">optionalUserProps</span>: <span class="title class_">OptionalUserProps</span> = <span class="string">&#x27;age&#x27;</span>; <span class="comment">// &#x27;age&#x27; | &#x27;phone&#x27; | &#x27;address&#x27;;</span></span><br></pre></td></tr></table></figure><p>Extract</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;email&#x27;</span> | <span class="string">&#x27;phone&#x27;</span> | <span class="string">&#x27;address&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUserProps</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUserPropsOnly</span> = <span class="title class_">Extract</span>&lt;<span class="title class_">UserProps</span>, <span class="title class_">RequiredUserProps</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">requiredUserPropsOnly</span>: <span class="title class_">RequiredUserPropsOnly</span> = <span class="string">&#x27;name&#x27;</span>; <span class="comment">// &#x27;name&#x27; | &#x27;email&#x27;;</span></span><br></pre></td></tr></table></figure><h5 id="display-none-和-opacity-0二者的区别">display none 和 opacity 0二者的区别</h5><p><code>display:none</code></p><ul><li>完全隐藏HTML元素并从页面布局移除他，不会显示在页面上，也不会占据空间，不会响应任何交互事件</li></ul><p><code>opacity:0</code></p><ul><li>完全透明，但元素仍然存在于页面布局中，并保持原始大小和位置，但对用户来说不可见，仍然可以接收交互事件，包括键盘和屏幕阅读器事件。</li></ul><h6 id="无障碍性考虑">无障碍性考虑</h6><p><code>display:none</code>：</p><ul><li><strong>可见性</strong>：<code>display: none</code> 隐藏了元素，对于所有用户，包括屏幕阅读器用户，它都是不可见的。</li><li><strong>交互性</strong>：由于元素被隐藏，因此不会响应键盘或屏幕阅读器事件。这可能导致对于视力障碍者而言，无法访问其中的内容或功能。</li><li><strong>语义</strong>：如果使用 <code>display: none</code> 隐藏了某些重要内容，屏幕阅读器无法访问这些内容，因此会导致可访问性问题。</li></ul><p><code>opacity: 0</code>:</p><ul><li><strong>可见性</strong>：<code>opacity: 0</code> 使元素不可见，但仍然存在于页面布局中，因此对于视力障碍者来说，它是可见的（虽然不可见，但占据页面空间）。</li><li><strong>交互性</strong>：元素保持交互性，因此可以响应键盘和屏幕阅读器事件，使其内容和功能可访问。</li><li><strong>语义</strong>：使用 <code>opacity: 0</code> 可以确保屏幕阅读器能够访问元素的内容，以提供更好的可访问性。</li></ul><h6 id="额外">额外</h6><table><thead><tr><th></th><th><strong>display: none</strong></th><th><strong>visibility: hidden</strong></th><th style="text-align:center"><strong>opacity: 0</strong></th></tr></thead><tbody><tr><td><strong>是否占有空间</strong></td><td>×</td><td>√</td><td style="text-align:center">√</td></tr><tr><td><strong>是否可以进行DOM事件监听</strong></td><td>×</td><td>×</td><td style="text-align:center">√</td></tr><tr><td><strong>是否可以点击</strong></td><td>×</td><td>×</td><td style="text-align:center">√</td></tr><tr><td><strong>是否可以被子元素继承</strong></td><td>×</td><td>√</td><td style="text-align:center">√</td></tr><tr><td><strong>子元素能否通过改变属性值来改变继承自父亲的隐藏状态</strong></td><td>×</td><td>√</td><td style="text-align:center">×</td></tr></tbody></table><p><strong>visibility: hidden</strong>  是什么？</p><p><strong>display: none</strong>： 从这个世界消失了, 不存在了； <strong>opacity: 0</strong>： 视觉上隐身了, 看不见, 可以触摸得到； <strong>visibility: hidden</strong>： 视觉和物理上都隐身了, 看不见也摸不到, 但是存在的。</p><p>来源：<a href="https://juejin.cn/post/6844904202867572749">opacity: 0、visibility: hidden、display: none 优劣和适用场景，以及隐藏元素的几种方法 - 掘金 (juejin.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;汗流浃背&quot;&gt;汗流浃背&lt;/h4&gt;
&lt;h5 id=&quot;汗流浃背-v2&quot;&gt;汗流浃背&lt;/h5&gt;
&lt;p&gt;甚至不小心鸽了一个多小时&lt;/p&gt;
&lt;p&gt;1.介绍js数组方法，数组遍历方法的相关区别&lt;/p&gt;
&lt;p&gt;2.react常用hook&lt;/p&gt;
&lt;p&gt;3.css居中&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="https://0922wx.github.io/2024/10/13/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://0922wx.github.io/2024/10/13/%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2024-10-13T06:47:49.000Z</published>
    <updated>2024-10-13T09:38:15.467Z</updated>
    
    <content type="html"><![CDATA[<h5 id="script标签里的async和defer有什么区别？">script标签里的async和defer有什么区别？</h5><p>没有async和defer时：</p><ul><li>浏览器立即加载并执行指定的脚本</li></ul><p>有async：</p><ul><li>加载和渲染后面元素的过程将和script的<strong>加载和执行并行进行</strong>(异)</li></ul><p>有defer:</p><ul><li>加载和渲染后面元素的过程将和script的<strong>加载并行进行</strong>，<strong>要等所有元素解析完成之后才会执行</strong>(异)</li></ul><p>创造的时间节点，defer比async早，defer保证脚本顺序，async不会，谁先下载好就加载谁</p><h5 id="setTimeout最小执行时间">setTimeout最小执行时间</h5><p><code>setTimeout</code>：4ms</p><p><code>setInterval</code>：10ms，小于10ms就会被调整到10ms</p><p>为什么是这两个数字？ ——&gt; htlm5就是这么规定的</p><h5 id="DOM树和渲染树区别">DOM树和渲染树区别</h5><p>DOM树和HTML标签一一对应，包括head和隐藏元素</p><p>渲染树是不包含head和隐藏元素</p><h5 id="git解决冲突">git解决冲突</h5><p>比如：</p><ol><li>两个分支修改同一个文件</li><li>两个分支修改同一个文件的名字</li></ol><p>解决：</p><ol><li>当前分支上直接修改代码 add commit</li><li>本地当前分支上修改冲突 add commit push</li></ol><h5 id="redux核心原理">redux核心原理</h5><p>核心组成三部分：</p><ul><li>Store</li><li>Action</li><li>Reducer：一个函数，接收两个参数，action和当前state</li></ul><p>整个工作流程，数据流严格单向，只能通过dispatch action的方式触发数据状态的修改</p><p>Action进入对于Reducer进行处理最终得到新的状态State，再进一步触发Vaiew的数据更新</p><h5 id="HashRouter和BrowserRouter区别">HashRouter和BrowserRouter区别</h5><p>HashRouter：</p><ul><li>基于hash模式，跳转原理是使用了location.hash、location.replace在域名后，先拼接 /#，再拼接路径，也就是利用锚点，实现路由的跳转。如：<a href="http://www.dzm.com/?spm=a2c6h.13046898.publish-article.5.69536ffatf0FOn#/xx">http://www.dzm.com/#/xx</a></li></ul><p>BrowserRouter：</p><ul><li>基于history模式，原理是了 HTML5 为浏览器全局的 history 对象新增了两个 API，包括 history.pushState、history.replaceState</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;script标签里的async和defer有什么区别？&quot;&gt;script标签里的async和defer有什么区别？&lt;/h5&gt;
&lt;p&gt;没有async和defer时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器立即加载并执行指定的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有async：&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>10-13</title>
    <link href="https://0922wx.github.io/2024/10/13/10-13/"/>
    <id>https://0922wx.github.io/2024/10/13/10-13/</id>
    <published>2024-10-13T03:08:47.000Z</published>
    <updated>2024-10-25T15:30:33.241Z</updated>
    
    <content type="html"><![CDATA[<p>北海牧场浓醇凝酪</p><p>豪赤</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;北海牧场浓醇凝酪&lt;/p&gt;
&lt;p&gt;豪赤&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日常" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="流水账" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="2024年" scheme="https://0922wx.github.io/categories/%E6%97%A5%E5%B8%B8/%E6%B5%81%E6%B0%B4%E8%B4%A6/2024%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>FirstofArray</title>
    <link href="https://0922wx.github.io/2024/10/11/FirstofArray/"/>
    <id>https://0922wx.github.io/2024/10/11/FirstofArray/</id>
    <published>2024-10-11T14:30:02.000Z</published>
    <updated>2024-10-11T14:34:40.827Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个<code>First&lt;T&gt;</code>泛型，它接受一个数组<code>T</code>并返回它的第一个元素的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">type</span> arr2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">type</span> head1 = <span class="title class_">First</span>&lt;arr1&gt; <span class="comment">// 应推导出 &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">type</span> head2 = <span class="title class_">First</span>&lt;arr2&gt; <span class="comment">// 应推导出 3</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ============= Test Cases =============</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Equal</span>, <span class="title class_">Expect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./test-utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cases = [</span><br><span class="line">  <span class="title class_">Expect</span>&lt;<span class="title class_">Equal</span>&lt;<span class="title class_">First</span>&lt;[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]&gt;, <span class="number">3</span>&gt;&gt;,</span><br><span class="line">  <span class="title class_">Expect</span>&lt;<span class="title class_">Equal</span>&lt;<span class="title class_">First</span>&lt;[<span class="function">() =&gt;</span> <span class="number">123</span>, &#123; <span class="attr">a</span>: <span class="built_in">string</span> &#125;]&gt;, <span class="function">() =&gt;</span> <span class="number">123</span>&gt;&gt;,</span><br><span class="line">  <span class="title class_">Expect</span>&lt;<span class="title class_">Equal</span>&lt;<span class="title class_">First</span>&lt;[]&gt;, <span class="built_in">never</span>&gt;&gt;,</span><br><span class="line">  <span class="title class_">Expect</span>&lt;<span class="title class_">Equal</span>&lt;<span class="title class_">First</span>&lt;[<span class="literal">undefined</span>]&gt;, <span class="literal">undefined</span>&gt;&gt;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> errors = [</span><br><span class="line">  <span class="comment">// @ts-expect-error</span></span><br><span class="line">  <span class="title class_">First</span>&lt;<span class="string">&#x27;notArray&#x27;</span>&gt;,</span><br><span class="line">  <span class="comment">// @ts-expect-error</span></span><br><span class="line">  <span class="title class_">First</span>&lt;&#123; <span class="number">0</span>: <span class="string">&#x27;arrayLike&#x27;</span> &#125;&gt;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ============= Your Code Here =============</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = </span><br></pre></td></tr></table></figure><h5 id="what-can-i-say">what can i say?</h5><p>毫无头绪捏</p><p><code>type First&lt;T extends any[]&gt; = T extends [infer F, ...any[]] ? F : never;</code></p><p>通过条件类型提取数组的第一个元素 <code>F</code>。<code>[infer F, ...any[]]</code> 表示一个数组，<code>F</code> 是第一个元素，<code>...any[]</code> 表示剩余的元素可以是任意类型。</p><p>我怎么感觉好像没看过这种东西</p><p>什么遍历 infer，完全找不到地方看</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实现一个&lt;code&gt;First&amp;lt;T&amp;gt;&lt;/code&gt;泛型，它接受一个数组&lt;code&gt;T&lt;/code&gt;并返回它的第一个元素的类型。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="TS类型体操" scheme="https://0922wx.github.io/categories/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/"/>
    
    <category term="简单题" scheme="https://0922wx.github.io/categories/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Object.key,value和entries</title>
    <link href="https://0922wx.github.io/2024/10/11/Object-key-value%E5%92%8Centries/"/>
    <id>https://0922wx.github.io/2024/10/11/Object-key-value%E5%92%8Centries/</id>
    <published>2024-10-11T12:57:37.000Z</published>
    <updated>2024-10-11T13:08:28.530Z</updated>
    
    <content type="html"><![CDATA[<p>key和value，键值对罢了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">age</span>:<span class="number">11</span>&#125;); <span class="comment">// [&quot;name&quot;,&quot;age&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">age</span>:<span class="number">11</span>&#125;) <span class="comment">// [&#x27;tom&#x27;,11]</span></span><br></pre></td></tr></table></figure><p>主要是记录一下entries()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">age</span>:<span class="number">11</span>&#125;)<span class="comment">//[Array(2),Arrar(2)]</span></span><br></pre></td></tr></table></figure><p>我去，二维数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//[Array(2),Arrar(2),Arrar(2)]</span></span><br></pre></td></tr></table></figure><p>手工返回键值对组成的数组，第一个元素是属性的键（始终是字符串），第二个元素是属性值。</p><p>那么绝配map了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map); <span class="comment">// 输出: Map(2) &#123;&quot;foo&quot; =&gt; &quot;bar&quot;, &quot;baz&quot; =&gt; 42&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;key和value，键值对罢了&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Js有的没的" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/Js%E6%9C%89%E7%9A%84%E6%B2%A1%E7%9A%84/"/>
    
    
  </entry>
  
  <entry>
    <title>神秘小厂</title>
    <link href="https://0922wx.github.io/2024/10/10/%E7%A5%9E%E7%A7%98%E5%B0%8F%E5%8E%82/"/>
    <id>https://0922wx.github.io/2024/10/10/%E7%A5%9E%E7%A7%98%E5%B0%8F%E5%8E%82/</id>
    <published>2024-10-10T11:51:17.000Z</published>
    <updated>2024-10-10T12:01:25.695Z</updated>
    
    <content type="html"><![CDATA[<h5 id="面面相觑">面面相觑</h5><p>1.vue的生命周期(没用过vue)</p><p>2.小程序做过吗(没有)</p><p>3.css2和css3有什么区别</p><p>4.怎么水平居中</p><p>5.es6新增了什么</p><p>6.==和===的区别</p><p>7.react怎么父传子</p><p>8.聊天室用了什么技术聊天(websocket)</p><p>反问:</p><p>主要用vue，原生小程序开发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;面面相觑&quot;&gt;面面相觑&lt;/h5&gt;
&lt;p&gt;1.vue的生命周期(没用过vue)&lt;/p&gt;
&lt;p&gt;2.小程序做过吗(没有)&lt;/p&gt;
&lt;p&gt;3.css2和css3有什么区别&lt;/p&gt;
&lt;p&gt;4.怎么水平居中&lt;/p&gt;
&lt;p&gt;5.es6新增了什么&lt;/p&gt;
&lt;p&gt;6.==和===的</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>ThreeJs一些概念</title>
    <link href="https://0922wx.github.io/2024/10/09/ThreeJs/"/>
    <id>https://0922wx.github.io/2024/10/09/ThreeJs/</id>
    <published>2024-10-09T10:40:57.000Z</published>
    <updated>2024-10-13T13:28:34.072Z</updated>
    
    <content type="html"><![CDATA[<h5 id="三要素">三要素</h5><ol><li>场景 Scene       容器</li><li>相机 Camera    观察</li><li>渲染器 Render   组合</li></ol><h5 id="起步">起步</h5><p>随便找一个文件夹.<code>yarn init</code>,然后在设置里面写:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>然后<code>yarn add -D vite</code></p><p><code>yarn add -D three</code></p><p>OK</p><p>始于此</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建场景-&gt;创建相机-&gt;创建渲染器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="number">45</span>,<span class="variable language_">window</span>.<span class="property">innerWidth</span>/<span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="number">0.1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="number">1000</span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>东西都有了，那要怎么才能看到呢？</p><p><code>document.body.appendChild(renderer.domElement);</code></p><p>获取camera元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">45</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置相机位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">3</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">y</span> = <span class="number">2</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>()</span><br><span class="line">)</span><br><span class="line">scene.<span class="title function_">add</span>(cube)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line">cube.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">0.01</span>;</span><br><span class="line">cube.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;</span><br><span class="line">renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;三要素&quot;&gt;三要素&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;场景 Scene       容器&lt;/li&gt;
&lt;li&gt;相机 Camera    观察&lt;/li&gt;
&lt;li&gt;渲染器 Render   组合&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;起步&quot;&gt;起步&lt;/h5&gt;
&lt;p&gt;随便找一个文件</summary>
      
    
    
    
    <category term="前端" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ThreeJs" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/ThreeJs/"/>
    
    <category term="事前准备" scheme="https://0922wx.github.io/categories/%E5%89%8D%E7%AB%AF/ThreeJs/%E4%BA%8B%E5%89%8D%E5%87%86%E5%A4%87/"/>
    
    
  </entry>
  
</feed>
